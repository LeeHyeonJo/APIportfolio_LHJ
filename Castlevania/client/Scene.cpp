// 레이어 배열을 resize (- elayer) 크기만큼 할당. 
// ㄴ 레이어 안에 게임오브젝트가 각각 들어감. 
// ㄴ 그 크기만큼, (이넘 클래스 참고) 레이어 배열의 크기를 할당하려는 것. 



// 씬의 업데이터으세ㅓ, 
// 레이어의 크기만큼 for문을 돌리면서 
// (얘네 갖고있는 관계 생각하기)

// 범위기만으로 for문의 조건을 바꿔쓸 수 있음.
// 첫번째 레이어에 있는 게임 오브젝트 다 돌고, 그 다음 레이어로 넘어가고 
// 그러니까 그 안에서 업데이트 

// ** 레이어의 업데이트가 돌면 -> 게임 오브젝트의 업데이트도 돌아야 한다
// ** 렌더도 동일하게 진행된다. 



///// 최상단에서부터 내부까지 업데이트 / 렌더를 반복하게 구현됨
// ㄴ 씬 -> 레이어(배열) -> 게임오브젝트(주소)

/// ** 최하단인 게임오브젝트까지 들어왔다(함수를 구현하면서). 그럼 게임오브젝트는 어떤 변수를 들어야 할까? 
// ㄴ 게임 오브젝트는 변수(배열)로 component를 들고 있어야 함 
//  ㄴ 트랜스 폼, 렌더러, 콜리터(충돌) - 유니티처럼: 이동방향, 눈에 띄워주기(화면에그리기), 충돌여부 
// // 이걸변수로 쓰지 않고, 그냥 클래스로 아예 빼버려서 쓰겠다는 뜻. 
// ** 엔티티는 씬을 상속받은 상태 


// 게임 제작시 렌더링과 충돌은, 상용엔진에서 제공된 기능만 사용하게 됨. 
// ㄴ 이걸 우리가 직접 만들어보는거임. 