#pragma once

// 수학 헤더를 여기에 구현할 것 <math>
// **벡터의 개념: 크기와 방향을 가지고 있는 수학적 표시 방법** 
// (0,0) 에서 (5,5)으로 이동하는 그래프를 생각해보기. 
// ㄴ 표현방식은 (5,5)-> (상단에 화살표 표시함) 
// **같은 벡터: (-1,0) 에서 (4,5)이동한 경우 :: 벡터로 표시하면 (5,5) -> 만큼 이동한 것이므로 
// **상단의 것과 동일한 벡터로 취급된다. 

// 게임에서는 시작점이 바뀌면 안되므로, 시작점을 (0,0) 을 두고 시작한다. = 기저 벡터 
// y축으로 위로 (1,0)으로 올리면 1벡터, x으로 오른쪽으로 1만큼 올리면 1벡터.
// y축으로,x축으로 3배씩 이동하면. 대각선으로 3 이동한 벡터를 구할 수 있음

// 벡터는 이렇게 사칙연산을 통해서 구할 수 있음. 

// 사용예시: pdf의 글씨. (픽셀을 깨지지만, 벡터로 저장하면 확대해도 안깨짐) 
// 위, 아래 벡터 점을 찍고 연결해주는 원리. 확대할때마다 기준점을 높이고, 그 사이를 연결해주는 방식. 

// == 아무튼 벡터는 점이다. 이차원 공간에서 찍어주는 점. (삼차원에서도 가능하지만 그건 나중에) 

namespace game::math
	// 네임스페이스; 이름의 간략화. console::math 를 생략하겠다는 의미. 
	// 벤다이어그램처럼 감싸고 있는 모양새. console>math 이 상태. 다시 math 안에 Vector2가 들어감. 
{
	struct Vector2 // 백터(위치와 방향)를 구현한다. 
		// console::math::Vector2 (벤다이어그램처럼 들어가있다고 생각하기) 
	{
		float x; // 그래프 읽을땐 배열과 동일한지 물어보기. 
		float y;

		Vector2() // 생성자: 벡터에 쓰이는 x,y값을 초기화 
			: x(0.0f)
			, y(0.0f) // float 초기화 : 0.0f <- 이렇게 함.   
		{
		
		}
	};
}
